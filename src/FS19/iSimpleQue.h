/*
 * --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- 
 * Copyright(C) 2004 ****, Inc.
 *
 *  File Name: iSimpleQue.h
 *  Created  : 08/06/04(æ°´) 08:28:31
 *
 *  Function
 *    
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 *  $Revision: 1.1.1.1 $
 *  $Date: 2008/07/27 10:32:49 $
 *  $Author: poko $
 * --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- 
 */
#ifndef _ISIMPLEQUE_H_
#define _ISIMPLEQUE_H_


#include <TCHAR.h>
#include <stdio.h>


// ========================================================================
// -- 
// ------------------------------------------------------------------------
class iSimpleQue
{
public:
  struct ELEMENT_T
  {
    ELEMENT_T*  next;
    int         cnt;
    TCHAR       str[ 1 ];
  };


public:
  // ======================================================================
  // -- 
  // ----------------------------------------------------------------------
  iSimpleQue( int num = 10 )
  {
    m_top.next = NULL;
    m_top.cnt  = 0;
  }
  // ----------------------------------------------------------------------


  // ======================================================================
  // -- 
  // ----------------------------------------------------------------------
  ~iSimpleQue()
  {
    clear();
  }
  // ----------------------------------------------------------------------


  // ======================================================================
  // -- 
  // ----------------------------------------------------------------------
  BOOL pop( void )
  {
    ELEMENT_T*  elm = m_top.next;

    if ( elm )
      {
        m_top.next = elm->next;

        m_top.cnt--;

        free( elm );
      }

    return ( m_top.next != NULL );
  }
  // ----------------------------------------------------------------------


  // ======================================================================
  // -- 
  // ----------------------------------------------------------------------
  TCHAR *top( void )
  {
    if ( m_top.next == NULL )
      {
        return NULL;
      }

    return m_top.next->str;
  }
  // ----------------------------------------------------------------------


  // ======================================================================
  // -- 
  // ----------------------------------------------------------------------
  int size( void )
  {
    return m_top.cnt;
  }
  // ----------------------------------------------------------------------


  // ======================================================================
  // -- 
  // ----------------------------------------------------------------------
  ELEMENT_T *push( const TCHAR * target )
  {
    ELEMENT_T*  elm;
    size_t      len;

    elm = search( target );

    if ( elm == NULL )
      {
        len = _tcslen( target ) + 1;

        elm = ( ELEMENT_T* )malloc( sizeof( ELEMENT_T ) + len * sizeof( TCHAR ) );

        if ( elm )
          {
            elm->next = m_top.next;

            _tcscpy_s( elm->str, len, target );

            m_top.next = elm;

            m_top.cnt++;

            elm->cnt  = m_top.cnt;
          }
      }

    return elm;
  }
  // ----------------------------------------------------------------------


  // ======================================================================
  // -- 
  // ----------------------------------------------------------------------
  void clear( void )
  {
    while ( pop() );
  }
  // ----------------------------------------------------------------------


  // ======================================================================
  // -- 
  // ----------------------------------------------------------------------
  ELEMENT_T *search( const TCHAR *str )
  {
    ELEMENT_T*  elm;
    ELEMENT_T*  prev = NULL;

    for ( elm = m_top.next; elm; elm = elm->next )
      {
        if ( _tcscmp( elm->str, str ) == 0 )
          {
            if ( prev )
              {
                prev->next = elm->next;
                elm->next  = m_top.next;
                m_top.next = elm;
              }

            break;
          }

        prev = elm;
      }

    return elm;
  }
  // ----------------------------------------------------------------------


private:
  ELEMENT_T   m_top;

};
// ------------------------------------------------------------------------


#endif // _ISIMPLEQUE_H_
